;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; le code de l'equipe rouge basique
;; préfixe : green-team
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; mem0 x
;; mem1 y
;; mem2 une espece
;; mem3
;; mem4 si il rentre à la base
;; mem5 si il a une cible
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;
;; FONCTION COMMUNES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to green-team-ask-for-energy [ b n ]
  ask b [ if (energy > 6000) [ give-energy myself n ]]
end

to green-team-go-back-to-base
  ;; détermine la base la plus proche
  let b min-one-of my-bases [ distance myself ]
  if (b != nobody) [
    ;; si le robot est arrivé à la base
    ifelse (distance b <= 2)
      [ 
        ;; dépose sa nourriture
        give-food b carrying-food?
        ;; demande de l'énergie si il reste moins de 1000
        if (energy < 1000) [ green-team-ask-for-energy b 300 ]
        ;; demande de l'énergie pour créer 5 missiles
        if ((Breed = RocketLaunchers) and (nb-missiles = 0)) [
          green-team-ask-for-energy b 500
          new-missile 5
        ]
        set mem4 0
        ;; fait demi-tour
        rt 180
      ]
    ;; sinon
      [
        ;; s'oriente vers la base avec un peu d'aléatoire
        set heading towards b - 20 + random 40
        ;; fait un demi tour si il y a du monde devant
        ifelse (free-ahead? speed = nobody)  [ forward-move speed ]
      [let a one-of ( (perceive-robots friend) in-cone 2 135 with [ breed = Harvesters or breed = Explorers ])
        give-food a carrying-food?
        set mem4 0
        rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
      ]
    ]    
end

to green-team-go-and-eat
  if ((breed = RocketLaunchers and (mem5 = 0)) or (breed = Explorers)) [
    random-move
  ]
end

to-report green-team-no-target?
  report mem5 = 0
end

to green-team-set-target [ x y espece ]
  set mem0 x set mem1 y set mem2 espece set mem5 1
end


;; FONCTIONS EXPLORERS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


to green-team-call-rocket-launcher [ x y espece ]
  let rl min-one-of perceive-specific-robots color RocketLaunchers [ distancexy x y ]
  if (rl != nobody) [ ask rl [ green-team-set-target x y espece ]]
end

to green-team-call-explorer [ x y espece ]
  let ex one-of perceive-specific-robots color Explorers
  if (ex != nobody) [
    ask ex [
      set mem0 x 
      set mem1 y
      set mem2 espece
      set mem5 1
    ]
  ]
end

to green-team-call-harvester
  ifelse (mem5 != 0) [
    set mem5 (mem5 - 1) 
  ]
  [
    let x mem0
    let y mem1
    let food one-of perceive-food with [ (abs (xcor - x ) > 5) or (abs (ycor - y ) > 5) ]
    if ( food != nobody ) [  
      ;; cherche un harvester sans cible dans sa zone de perception
      let harv one-of ((perceive-robots friend )  with [ breed = Harvesters and mem5 = 0 and mem4 = 0] )
      if ( harv != nobody ) [
        set mem5 5
        set mem0 [xcor] of food
        set mem1 [ycor] of food
        ask harv [
          set mem0 [xcor] of food
          set mem1 [ycor] of food
          set mem5 1
        ]
      ]
    ]
  ]
  
end


to gogreenExplorer
  green-team-call-harvester
  if ((energy < 200) or (carrying-food? > 2000))[ 
    set mem4 1
    green-team-go-back-to-base
  ] 
  green-team-go-and-eat

  ;;ifelse (not green-team-no-target?) [
  ;;  green-team-call-rocket-launcher mem0 mem1 mem2
  ;;  green-team-call-explorer mem0 mem1 mem2
  ;;]
  ;;[ let h one-of perceive-robots2 ennemy1 ennemy2
  ;;  if ( h != nobody ) [ green-team-call-rocket-launcher [xcor] of h [ycor] of h [breed] of h]
  ;;]
end

;; FONCTIONS ROCKETLAUNCHES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to green-team-dodge-missile
  let o min-one-of ((turtles in-radius detection-range) with [ breed = Fafs or breed = Missiles ]) [ distance myself]
  ;; si le missile est en direction de l'agent à 10° près
  if  ((o != nobody) and (abs ((towardsxy ([xcor] of o) ([ycor] of o)) - heading - 180 ) < 10 ))[
    ifelse ([breed] of o = Fafs)[
      ;; fuite de l'agent
      set heading [heading] of o
      if (free-ahead? speed = nobody ) [ forward-move speed ]
    ]
    [
      ;; tentative d'esquiver le missile
      set heading [heading] of o
      rt 90
      if (free-ahead? speed = nobody ) [ forward-move speed ]
    ]
  ] 
end

to green-team-select-target
  if (green-team-no-target?)
  [
    let h min-one-of perceive-robots ennemy [ distance myself ]
    ifelse ( h != nobody ) [
      set mem0 [xcor] of h
      set mem1 [ycor] of h
      set mem2 [breed] of h
      set mem5 1
      ;; avance en direction de la cible 
      if ([breed] of h != RocketLaunchers)[
        set heading towardsxy mem0 mem1 
        if (free-ahead? speed = nobody ) [ forward-move speed ]
      ]
    ]
    [ set mem5 0 ]
  ]
end

to green-team-shoot 
  if (not green-team-no-target?) 
  [
    ifelse (distancexy mem0 mem1 < detection-range)
    [ launch-rocket towardsxy mem0 mem1 set mem5 0]
    [ set heading towardsxy mem0 mem1 - 20 + random 40
      if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
      if (free-ahead? speed = nobody ) [ forward-move speed ]
    ]
  ]
end

to gogreenRocketLauncher
  ifelse ((energy < 1000) or ( nb-missiles = 0 )) [green-team-go-back-to-base]
  [
    green-team-dodge-missile
    green-team-select-target
    green-team-shoot
    green-team-go-and-eat
  ]
  if ((energy > 3000) and (nb-missiles < 5)) [ new-missile 1 ]
end

;; FONCTIONS HARVESTERS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; va chercher a manger autour de lui
to green-team-harvesters-go-and-eat
  let b min-one-of perceive-food [ distance myself ]
  ifelse (b != nobody) [ 
    ifelse (distance b) <= 2
      [ take-food b ]
      [ set heading towards b - 20 + random 40
      ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
      ]
  ]
  [
    ifelse (mem5 = 1)
    [ 
      ifelse (distancexy mem0 mem1 > 1)
      [
        set heading towardsxy mem0 mem1
        ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
      ]
      [ set mem5 0 ]
    ]
    [ random-move ]
  ]
end


to gogreenHarvester
  ;; recupere la nourriture
  let f min-one-of perceive-food [ distance myself ]
  while [(f != nobody) and (distance f <= 2)] [
    take-food f
    set f min-one-of perceive-food [ distance myself ]
  ]

  ;; recupere les murs près de notre base
  let d min-one-of my-bases [ distance myself ]
  if (distance d < 15)[
    let b min-one-of perceive-walls [ distance myself ]
    if (b != nobody) and (distance b <= 2) [
      take-wall b
    ]
  ]
  ;; s'il doit rentrer à la base
  ifelse ((mem4 = 1) or ((one-of perceive-food = nobody)  and (mem5 = 0) and  (carrying-food? > 500)) or (energy < 100))
  [
    ; retour à la base
    set mem4 1
    ;; rentre à la base si certaines conditions sont vérifiées
    green-team-go-back-to-base
    if (energy > 100) and (carrying-food? > 100) [ 
      ;; détermine la distance de la base la plus proche
      let b min-one-of my-bases [ distance myself ]
      if (b != nobody) [
        ;; si le robot est à moins de 20 de la base
        if (distance b < 20)
          [ plant-seeds color max-seeds ]
      ]
    ]
  ]
  [
    ifelse ((not green-team-no-target?) and (distance d > 20 ))[
      ifelse(length carried-walls-nrj > 0)
      [
        my-drop-wall
        green-team-go-and-eat
        
      ]
      [
        set mem5 0
        green-team-go-and-eat
      ]
    ]
    ;; cherche Ã  manger
    [green-team-harvesters-go-and-eat]
  ]
end


;; FONCTIONS BASES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to gogreenBase
  set label energy
  ifelse ( count ((perceive-robots friend) with [breed = Explorers] ) != 0 ) [ set mem10 20 ] [ set mem10 (mem10 - 1) ]
  ifelse ( count ((perceive-robots friend) with [breed = Harvesters] ) > 10 ) [ set mem9 10 ] [ set mem9 (mem9 - 1) ]
  ifelse ( count ((perceive-robots friend) with [breed = RocketLaunchers] ) > 10 ) [ set mem11 10 ] [ set mem11 (mem11 - 1) ]
  
  if ((energy > 12000) and (mem9 <= 0)) [ new-Harvester self ]
  if ((energy > 15000) and (mem10 <= 0)) [new-Explorer self ]
  if ((energy > 15000) and (mem11 <= 0)) [new-RocketLauncher self ]
  
   
  let t one-of perceive-specific-robots ennemy rocketlaunchers
  if (t != nobody) [
    ;; regarde s'il y a des robots amis en direction de la cible potentielle t avant de tirer
    if (not any? perceive-robots-in-cone color towards t) [ launch-faf t ]
  ]
end

;; procedure pour initialiser les explorers rouges
to initgreenExplorer
end

;; procedure pour initialiser les rocket-launchers rouges
to initgreenRocketLauncher
end 

;; procedure pour initialiser les rocket-launchers rouges
to initgreenHarvester
 ;; set mem2 0
 ;; set mem3 0
end

;; procedure pour initialiser les bases rouges
to initgreenBase
  set mem9 0 
  set mem10 0
  set mem11 0
end

;; reecriture

to my-drop-wall
  if (not empty? carried-walls-nrj) [
    hatch-Walls 1 [
      set heading [heading] of myself
      set size 1
      set color gray
      set energy first ([carried-walls-nrj] of myself)
      set carrying-food? 0
      set mem0 0
      set mem1 0
      set mem2 0
      set mem3 0
      set mem4 0 
      set mem5 0
      set detection-range 0
      set speed 0
      set fd-ok? false
      set percept 0
      set my-bases 0
      set friend gray
      set ennemy gray
      
      fd 1
    ]
    set carried-walls-nrj remove-item 0 carried-walls-nrj
  ]
end
